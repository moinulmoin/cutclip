name: Release

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  release:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.title, 'Release v')
    runs-on: macos-15
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract version from PR title
        id: version
        run: |
          VERSION=$(echo "${{ github.event.pull_request.title }}" | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
      
      - name: Update version in Xcode project
        run: |
          # Update marketing version
          sed -i '' "s/MARKETING_VERSION = .*/MARKETING_VERSION = ${{ steps.version.outputs.version_number }};/g" cutclip.xcodeproj/project.pbxproj
          
          # Update current project version (build number)
          sed -i '' "s/CURRENT_PROJECT_VERSION = .*/CURRENT_PROJECT_VERSION = ${{ github.run_number }};/g" cutclip.xcodeproj/project.pbxproj
      
      - name: Build app
        run: |
          xcodebuild -project cutclip.xcodeproj \
            -scheme cutclip \
            -configuration Release \
            -derivedDataPath build \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Developer ID Application: Ideaplexa LLC (53P98M92V7)" \
            DEVELOPMENT_TEAM="53P98M92V7" \
            clean build
      
      - name: Create DMG
        run: |
          # Install create-dmg if not present
          if ! command -v create-dmg &> /dev/null; then
            brew install create-dmg
          fi
          
          # Create DMG
          create-dmg \
            --volname "CutClip" \
            --window-size 600 400 \
            --icon-size 100 \
            --app-drop-link 450 150 \
            --no-internet-enable \
            "CutClip-${{ steps.version.outputs.version }}.dmg" \
            "build/Build/Products/Release/cutclip.app"
      
      - name: Notarize DMG
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          # Store notarization credentials
          xcrun notarytool store-credentials "notary-profile" \
            --apple-id "$APPLE_ID" \
            --team-id "$TEAM_ID" \
            --password "$NOTARIZATION_PASSWORD"
          
          # Submit for notarization
          xcrun notarytool submit "CutClip-${{ steps.version.outputs.version }}.dmg" \
            --keychain-profile "notary-profile" \
            --wait
          
          # Staple the notarization ticket
          xcrun stapler staple "CutClip-${{ steps.version.outputs.version }}.dmg"
      
      - name: Generate appcast
        env:
          SPARKLE_PRIVATE_KEY: ${{ secrets.SPARKLE_PRIVATE_KEY }}
        run: |
          # Download Sparkle tools if needed
          if [ ! -f "./sparkle/bin/generate_appcast" ]; then
            curl -L https://github.com/sparkle-project/Sparkle/releases/download/2.6.0/Sparkle-2.6.0.tar.xz -o sparkle.tar.xz
            mkdir -p sparkle
            tar -xf sparkle.tar.xz -C sparkle
            rm sparkle.tar.xz
          fi
          
          # Create a directory for the release
          mkdir -p releases
          cp "CutClip-${{ steps.version.outputs.version }}.dmg" releases/
          
          # Generate appcast
          ./sparkle/bin/generate_appcast \
            --ed-key-file <(echo "$SPARKLE_PRIVATE_KEY") \
            --download-url-prefix "https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/" \
            --channel "release" \
            releases/
          
          # Move appcast to root for upload
          cp releases/appcast.xml ./appcast.xml
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ${{ github.event.pull_request.title }}
          body: ${{ github.event.pull_request.body }}
          files: |
            CutClip-${{ steps.version.outputs.version }}.dmg
            appcast.xml
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}